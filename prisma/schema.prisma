generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  name      String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String
  id        Int      @id @default(autoincrement())
  verifie   Boolean      @default(false)
  token     String?  // pour confirmation email
  superUser Boolean      @default(false)
}

model TemoignagesTexte {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}

model TemoignagesVideo {
  id        Int      @id @default(autoincrement())
  videoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  slug      String    @unique
  articles  Article[]

  @@index([slug])
}

model Tag {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  createdAt    DateTime     @default(now())
  slug         String       @unique
  tagsArticles TagArticle[]

  @@index([slug])
}

model Article {
  id              Int          @id @default(autoincrement())
  slug            String       @unique
  title           String
  description     String
  coverImage      String?
  content         Json
  published       Boolean      @default(false)
  publishedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  categoryId      Int
  conclusion      String       @default("Alors pour tous vos problemes, veuillez contacter le medium Ali Moussa")
  metaDescription String
  metaTitre       String
  category        Category     @relation(fields: [categoryId], references: [id])
  tagsArticles    TagArticle[]

  @@index([categoryId])
}

model TagArticle {
  articleId  Int
  tagId      Int
  assignedAt DateTime @default(now())
  article    Article  @relation(fields: [articleId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}
